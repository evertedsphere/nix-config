;;; config/citar.el -*- lexical-binding: t; -*-

(use-package! citar-embark
  :after citar embark
  :no-require
  :config (citar-embark-mode))

(defvar local/bibliography (f-expand "refs.bib" org-roam-directory)
  "Bibliography file generated by BetterBibTEX.")
(defvar local/citar-refs-dir (f-expand "refs" org-roam-directory)
  "Refs directory.")

(setq
 org-cite-global-bibliography (list local/bibliography)
 org-cite-insert-processor 'citar
 org-cite-follow-processor 'citar
 org-cite-activate-processor 'citar)

(setq
 citar-bibliography org-cite-global-bibliography
 citar-notes-paths (list local/citar-refs-dir)
 ;; citar-symbols
 ;; `(;; (file ,(all-the-icons-faicon "file-pdf-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
 ;;   (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
 ;;   (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " "))
 citar-symbol-separator "  ")

(use-package! citar-org-roam
  :after citar org-roam
  :no-require
  :config
  (setq citar-org-roam-subdir "refs")
  (setq citar-org-roam-note-title-template "${title}")
  (citar-org-roam-mode))

;; https://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/

;; citar-org-roam only offers the citar-org-roam-note-title-template variable
;; for customizing the contents of a new note and no way to specify a custom
;; capture template. And the title template uses citar's own format, which means
;; we can't run arbitrary functions in it.
;;
;; Left with no other options, we override the
;; citar-org-roam--create-capture-note function and use our own template in it.
(defun local/citar-org-roam--create-capture-note (citekey entry)
  "Open or create org-roam node for CITEKEY and ENTRY."
  (let* ((author (citar-format--entry "${author editor}" entry))
         (title  (citar-format--entry citar-org-roam-note-title-template entry)))
    (org-roam-capture-
     :templates
     '(("r" "reference" plain "%?" :if-new
        (file+head
         "%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \"/\")) \"${citekey}.org\")"
         "#+title: [${citekey}] ${title}
#+authors: ${author}

#+begin_src bibtex
%(local/citar-get-bibtex \"${citekey}\")
#+end_src
")
        :immediate-finish t
        :unnarrowed t))
     :info (list :citekey citekey :author author)
     :node (org-roam-node-create :title title)
     :props '(:finalize find-file))
    (org-roam-ref-add (concat "@" citekey))))
(advice-add #'citar-org-roam--create-capture-note
            :override #'local/citar-org-roam--create-capture-note)

;; citar has a function for inserting bibtex entries into a buffer, but none for
;; returning a string. We could insert into a temporary buffer, but that seems
;; silly. Plus, we'd have to deal with trailing newlines that the function
;; inserts. Instead, we do a little copying and implement our own function.
(defun local/citar-get-bibtex (citekey)
  (let* ((bibtex-files
          (citar--bibliography-files))
         (entry
          (with-temp-buffer
            (bibtex-set-dialect)
            (dolist (bib-file bibtex-files)
              (insert-file-contents bib-file))
            (bibtex-search-entry citekey)
            (let ((beg (bibtex-beginning-of-entry))
                  (end (bibtex-end-of-entry)))
              (buffer-substring-no-properties beg end)))))
    entry))
